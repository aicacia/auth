basePath: /
definitions:
  Application:
    properties:
      created_at:
        format: date-time
        type: string
      description:
        type: string
      id:
        type: integer
      updated_at:
        format: date-time
        type: string
      uri:
        type: string
      website:
        type: string
    required:
    - created_at
    - description
    - id
    - updated_at
    - uri
    type: object
  ConfirmEmail:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  ConfirmPhoneNumber:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  CreateApplication:
    properties:
      description:
        type: string
      uri:
        type: string
    required:
    - description
    - uri
    type: object
  CreateEmail:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  CreatePhoneNumber:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  CreateTenent:
    properties:
      algorithm:
        type: string
      authorization_website:
        type: string
      client_id:
        type: string
      description:
        type: string
      email_endpoint:
        type: string
      expires_in_seconds:
        type: integer
      password_reset_expires_in_seconds:
        type: integer
      phone_number_endpoint:
        type: string
      private_key:
        type: string
      public_key:
        type: string
      refresh_expires_in_seconds:
        type: integer
      registration_website:
        type: string
      uri:
        type: string
    required:
    - description
    - uri
    type: object
  CreateUser:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  Email:
    properties:
      application_id:
        type: integer
      confirmed:
        type: boolean
      created_at:
        format: date-time
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        format: date-time
        type: string
    required:
    - application_id
    - confirmed
    - created_at
    - email
    - id
    - updated_at
    type: object
  ErrorMessage:
    properties:
      error:
        type: string
      parameters:
        items: {}
        type: array
    required:
    - error
    - parameters
    type: object
  Errors:
    properties:
      errors:
        additionalProperties:
          items:
            $ref: '#/definitions/ErrorMessage'
          type: array
        type: object
    required:
    - errors
    type: object
  Health:
    properties:
      date:
        format: date-time
        type: string
      db:
        type: boolean
    required:
    - date
    - db
    type: object
  OpenIDConfiguration:
    properties:
      authorization_endpoint:
        type: string
      claims_supported:
        items:
          type: string
        type: array
      code_challenge_methods_supported:
        items:
          type: string
        type: array
      grant_types_supported:
        items:
          type: string
        type: array
      id_token_signing_alg_values_supported:
        items:
          type: string
        type: array
      issuer:
        type: string
      jwks_uri:
        type: string
      registration_endpoint:
        type: string
      response_types_supported:
        items:
          type: string
        type: array
      scopes_supported:
        items:
          type: string
        type: array
      subject_types_supported:
        items:
          type: string
        type: array
      token_endpoint:
        type: string
      token_endpoint_auth_methods_supported:
        items:
          type: string
        type: array
      userinfo_endpoint:
        type: string
    required:
    - claims_supported
    - code_challenge_methods_supported
    - grant_types_supported
    - id_token_signing_alg_values_supported
    - issuer
    - response_types_supported
    - scopes_supported
    - subject_types_supported
    - token_endpoint
    - token_endpoint_auth_methods_supported
    - userinfo_endpoint
    type: object
  Pagination-Application:
    properties:
      has_more:
        type: boolean
      items:
        items:
          $ref: '#/definitions/Application'
        type: array
    required:
    - has_more
    - items
    type: object
  Pagination-Tenent:
    properties:
      has_more:
        type: boolean
      items:
        items:
          $ref: '#/definitions/Tenent'
        type: array
    required:
    - has_more
    - items
    type: object
  Pagination-User:
    properties:
      has_more:
        type: boolean
      items:
        items:
          $ref: '#/definitions/User'
        type: array
    required:
    - has_more
    - items
    type: object
  PhoneNumber:
    properties:
      application_id:
        type: integer
      confirmed:
        type: boolean
      created_at:
        format: date-time
        type: string
      id:
        type: integer
      phone_number:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - application_id
    - confirmed
    - created_at
    - id
    - phone_number
    - updated_at
    type: object
  RegistrationRequest:
    properties:
      password:
        type: string
      password_confirmation:
        type: string
      username:
        type: string
    type: object
  ResetPassword:
    properties:
      password:
        type: string
      password_confirmation:
        type: string
    required:
    - password
    - password_confirmation
    type: object
  TOTP:
    properties:
      created_at:
        format: date-time
        type: string
      enabled:
        type: boolean
      id:
        type: integer
      tenent_id:
        type: integer
      updated_at:
        format: date-time
        type: string
      user_id:
        type: integer
    required:
    - created_at
    - enabled
    - id
    - tenent_id
    - updated_at
    - user_id
    type: object
  TOTPWithSecret:
    properties:
      created_at:
        format: date-time
        type: string
      enabled:
        type: boolean
      id:
        type: integer
      secret:
        type: string
      tenent_id:
        type: integer
      updated_at:
        format: date-time
        type: string
      user_id:
        type: integer
    required:
    - created_at
    - enabled
    - id
    - secret
    - tenent_id
    - updated_at
    - user_id
    type: object
  Tenent:
    properties:
      algorithm:
        type: string
      application_id:
        type: integer
      authorization_website:
        type: string
      client_id:
        type: string
      created_at:
        format: date-time
        type: string
      description:
        type: string
      expires_in_seconds:
        type: integer
      id:
        type: integer
      password_reset_expires_in_seconds:
        type: integer
      public_key:
        type: string
      refresh_expires_in_seconds:
        type: integer
      registration_website:
        type: string
      updated_at:
        format: date-time
        type: string
      uri:
        type: string
    required:
    - algorithm
    - application_id
    - authorization_website
    - client_id
    - created_at
    - description
    - expires_in_seconds
    - id
    - password_reset_expires_in_seconds
    - refresh_expires_in_seconds
    - updated_at
    - uri
    type: object
  Token:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      id_token:
        type: string
      issued_token_type:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_in:
        type: integer
      scope:
        items:
          type: string
        type: array
      token_type:
        type: string
    required:
    - access_token
    - expires_in
    - issued_token_type
    - refresh_token
    - refresh_token_expires_in
    - scope
    - token_type
    type: object
  TokenRequest:
    properties:
      actor_token:
        type: string
      actor_token_type:
        type: string
      assertion:
        type: string
      audience:
        type: string
      code:
        type: string
      code_verifier:
        type: string
      grant_type:
        type: string
      key:
        type: string
      password:
        type: string
      refresh_token:
        type: string
      requested_token_type:
        type: string
      resource:
        type: string
      scope:
        type: string
      secret:
        type: string
      subject_token:
        type: string
      subject_token_type:
        type: string
      username:
        type: string
    required:
    - grant_type
    type: object
  UpdateApplication:
    properties:
      description:
        type: string
      uri:
        type: string
    type: object
  UpdateTenent:
    properties:
      algorithm:
        type: string
      authorization_website:
        type: string
      client_id:
        type: string
      description:
        type: string
      email_endpoint:
        type: string
      expires_in_seconds:
        type: integer
      password_reset_expires_in_seconds:
        type: integer
      phone_number_endpoint:
        type: string
      private_key:
        type: string
      public_key:
        type: string
      refresh_expires_in_seconds:
        type: integer
      registration_website:
        type: string
      uri:
        type: string
    type: object
  UpdateUser:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  UpdateUserInfoRequest:
    properties:
      address:
        $ref: '#/definitions/UserInfoAddress'
      birthdate:
        format: date-time
        type: string
      family_name:
        type: string
      gender:
        type: string
      given_name:
        type: string
      locale:
        type: string
      middle_name:
        type: string
      name:
        type: string
      nickname:
        type: string
      picture:
        type: string
      profile:
        type: string
      website:
        type: string
      zoneinfo:
        type: string
    type: object
  User:
    properties:
      application_id:
        type: integer
      created_at:
        format: date-time
        type: string
      email:
        $ref: '#/definitions/Email'
      emails:
        items:
          $ref: '#/definitions/Email'
        type: array
      id:
        type: integer
      phone_number:
        $ref: '#/definitions/PhoneNumber'
      phone_numbers:
        items:
          $ref: '#/definitions/PhoneNumber'
        type: array
      updated_at:
        format: date-time
        type: string
      username:
        type: string
    required:
    - application_id
    - created_at
    - emails
    - id
    - phone_numbers
    - updated_at
    - username
    type: object
  UserInfo:
    properties:
      address:
        $ref: '#/definitions/UserInfoAddress'
      birthdate:
        format: date-time
        type: string
      created_at:
        format: date-time
        type: string
      family_name:
        type: string
      gender:
        type: string
      given_name:
        type: string
      locale:
        type: string
      middle_name:
        type: string
      name:
        type: string
      nickname:
        type: string
      picture:
        type: string
      preferred_username:
        type: string
      profile:
        type: string
      updated_at:
        format: date-time
        type: string
      user_id:
        type: integer
      website:
        type: string
      zoneinfo:
        type: string
    required:
    - address
    - created_at
    - preferred_username
    - updated_at
    - user_id
    type: object
  UserInfoAddress:
    properties:
      country:
        type: string
      locality:
        type: string
      postal_code:
        type: string
      region:
        type: string
      street_address:
        type: string
    type: object
  UserWithPermissions:
    properties:
      application_id:
        type: integer
      created_at:
        format: date-time
        type: string
      email:
        $ref: '#/definitions/Email'
      emails:
        items:
          $ref: '#/definitions/Email'
        type: array
      id:
        type: integer
      permissions:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      phone_number:
        $ref: '#/definitions/PhoneNumber'
      phone_numbers:
        items:
          $ref: '#/definitions/PhoneNumber'
        type: array
      updated_at:
        format: date-time
        type: string
      username:
        type: string
    required:
    - application_id
    - created_at
    - emails
    - id
    - permissions
    - phone_numbers
    - updated_at
    - username
    type: object
  Version:
    properties:
      build:
        type: string
      version:
        type: string
    required:
    - build
    - version
    type: object
  model.PasswordResetST:
    properties:
      password:
        type: string
      passwordConfirmation:
        type: string
      token:
        type: string
    required:
    - password
    - passwordConfirmation
    - token
    type: object
  model.RequestPasswordResetST:
    properties:
      email:
        type: string
      phoneNumber:
        type: string
    required:
    - email
    - phoneNumber
    type: object
  model.ValidateMFAST:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  protocol.AuthenticationExtensions:
    additionalProperties: true
    type: object
  protocol.AuthenticatorAttachment:
    enum:
    - platform
    - cross-platform
    type: string
    x-enum-varnames:
    - Platform
    - CrossPlatform
  protocol.AuthenticatorSelection:
    properties:
      authenticatorAttachment:
        allOf:
        - $ref: '#/definitions/protocol.AuthenticatorAttachment'
        description: |-
          AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only
          authenticators attached with the specified AuthenticatorAttachment enum.
      requireResidentKey:
        description: |-
          RequireResidentKey this member describes the Relying Party's requirements regarding resident
          credentials. If the parameter is set to true, the authenticator MUST create a client-side-resident
          public key credential source when creating a public key credential.
        type: boolean
      residentKey:
        allOf:
        - $ref: '#/definitions/protocol.ResidentKeyRequirement'
        description: |-
          ResidentKey this member describes the Relying Party's requirements regarding resident
          credentials per Webauthn Level 2.
      userVerification:
        allOf:
        - $ref: '#/definitions/protocol.UserVerificationRequirement'
        description: |-
          UserVerification This member describes the Relying Party's requirements regarding user verification for
          the create() operation. Eligible authenticators are filtered to only those capable of satisfying this
          requirement.
    type: object
  protocol.AuthenticatorTransport:
    enum:
    - usb
    - nfc
    - ble
    - hybrid
    - internal
    type: string
    x-enum-varnames:
    - USB
    - NFC
    - BLE
    - Hybrid
    - Internal
  protocol.ConveyancePreference:
    enum:
    - none
    - indirect
    - direct
    - enterprise
    type: string
    x-enum-varnames:
    - PreferNoAttestation
    - PreferIndirectAttestation
    - PreferDirectAttestation
    - PreferEnterpriseAttestation
  protocol.CredentialDescriptor:
    properties:
      id:
        description: CredentialID The ID of a credential to allow/disallow.
        items:
          type: integer
        type: array
      transports:
        description: The authenticator transports that can be used.
        items:
          $ref: '#/definitions/protocol.AuthenticatorTransport'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/protocol.CredentialType'
        description: The valid credential types.
    type: object
  protocol.CredentialParameter:
    properties:
      alg:
        $ref: '#/definitions/webauthncose.COSEAlgorithmIdentifier'
      type:
        $ref: '#/definitions/protocol.CredentialType'
    type: object
  protocol.CredentialType:
    enum:
    - public-key
    type: string
    x-enum-varnames:
    - PublicKeyCredentialType
  protocol.PublicKeyCredentialCreationOptions:
    properties:
      attestation:
        $ref: '#/definitions/protocol.ConveyancePreference'
      authenticatorSelection:
        $ref: '#/definitions/protocol.AuthenticatorSelection'
      challenge:
        items:
          type: integer
        type: array
      excludeCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      pubKeyCredParams:
        items:
          $ref: '#/definitions/protocol.CredentialParameter'
        type: array
      rp:
        $ref: '#/definitions/protocol.RelyingPartyEntity'
      timeout:
        type: integer
      user:
        $ref: '#/definitions/protocol.UserEntity'
    type: object
  protocol.PublicKeyCredentialRequestOptions:
    properties:
      allowCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      challenge:
        items:
          type: integer
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      rpId:
        type: string
      timeout:
        type: integer
      userVerification:
        $ref: '#/definitions/protocol.UserVerificationRequirement'
    type: object
  protocol.RelyingPartyEntity:
    properties:
      icon:
        description: |-
          A serialized URL which resolves to an image associated with the entity. For example,
          this could be a user’s avatar or a Relying Party's logo. This URL MUST be an a priori
          authenticated URL. Authenticators MUST accept and store a 128-byte minimum length for
          an icon member’s value. Authenticators MAY ignore an icon member’s value if its length
          is greater than 128 bytes. The URL’s scheme MAY be "data" to avoid fetches of the URL,
          at the cost of needing more storage.

          Deprecated: this has been removed from the specification recommendations.
        type: string
      id:
        description: A unique identifier for the Relying Party entity, which sets
          the RP ID.
        type: string
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.ResidentKeyRequirement:
    enum:
    - discouraged
    - preferred
    - required
    type: string
    x-enum-varnames:
    - ResidentKeyRequirementDiscouraged
    - ResidentKeyRequirementPreferred
    - ResidentKeyRequirementRequired
  protocol.UserEntity:
    properties:
      displayName:
        description: |-
          A human-palatable name for the user account, intended only for display.
          For example, "Alex P. Müller" or "田中 倫". The Relying Party SHOULD let
          the user choose this, and SHOULD NOT restrict the choice more than necessary.
        type: string
      icon:
        description: |-
          A serialized URL which resolves to an image associated with the entity. For example,
          this could be a user’s avatar or a Relying Party's logo. This URL MUST be an a priori
          authenticated URL. Authenticators MUST accept and store a 128-byte minimum length for
          an icon member’s value. Authenticators MAY ignore an icon member’s value if its length
          is greater than 128 bytes. The URL’s scheme MAY be "data" to avoid fetches of the URL,
          at the cost of needing more storage.

          Deprecated: this has been removed from the specification recommendations.
        type: string
      id:
        description: |-
          ID is the user handle of the user account entity. To ensure secure operation,
          authentication and authorization decisions MUST be made on the basis of this id
          member, not the displayName nor name members. See Section 6.1 of
          [RFC8266](https://www.w3.org/TR/webauthn/#biblio-rfc8266).
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.UserVerificationRequirement:
    enum:
    - required
    - preferred
    - discouraged
    type: string
    x-enum-comments:
      VerificationPreferred: This is the default
    x-enum-varnames:
    - VerificationRequired
    - VerificationPreferred
    - VerificationDiscouraged
  webauthncose.COSEAlgorithmIdentifier:
    enum:
    - -7
    - -35
    - -36
    - -65535
    - -257
    - -258
    - -259
    - -37
    - -38
    - -39
    - -8
    - -47
    type: integer
    x-enum-varnames:
    - AlgES256
    - AlgES384
    - AlgES512
    - AlgRS1
    - AlgRS256
    - AlgRS384
    - AlgRS512
    - AlgPS256
    - AlgPS384
    - AlgPS512
    - AlgEdDSA
    - AlgES256K
info:
  contact:
    email: nathanfaucett@gmail.com
    name: Nathan Faucett
  description: Auth API API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Auth API
paths:
  /.well-known/openid-configuration:
    get:
      consumes:
      - application/json
      operationId: openid-configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/OpenIDConfiguration'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - TenentId: []
      summary: Get openid configuration
      tags:
      - well-known
  /applications:
    get:
      consumes:
      - application/json
      operationId: applications
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Pagination-Application'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get applications
      tags:
      - application
    post:
      consumes:
      - application/json
      operationId: create-application
      parameters:
      - description: create application
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/CreateApplication'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Application'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Create application
      tags:
      - application
  /applications/{applicationId}/tenents:
    get:
      consumes:
      - application/json
      operationId: tenents
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Pagination-Tenent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get application tenents
      tags:
      - tenent
    post:
      consumes:
      - application/json
      operationId: create-tenent
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: create application
        in: body
        name: tenent
        required: true
        schema:
          $ref: '#/definitions/CreateTenent'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Tenent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Create application tenent
      tags:
      - tenent
  /applications/{applicationId}/tenents/{id}:
    delete:
      consumes:
      - application/json
      operationId: delete-tenent
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: application tenent id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Delete application tenent
      tags:
      - tenent
    get:
      consumes:
      - application/json
      operationId: tenent
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: application tenent id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tenent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get application tenent by id
      tags:
      - tenent
    patch:
      consumes:
      - application/json
      operationId: update-tenent
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: application tenent id
        in: path
        name: id
        required: true
        type: integer
      - description: update application
        in: body
        name: tenent
        required: true
        schema:
          $ref: '#/definitions/UpdateTenent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tenent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Update application tenent
      tags:
      - tenent
  /applications/{applicationId}/tenents/{id}/private-key:
    get:
      consumes:
      - application/json
      operationId: tenent-private-key
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: application tenent id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get application tenent by id
      tags:
      - tenent
  /applications/{applicationId}/users:
    get:
      consumes:
      - application/json
      operationId: users
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Pagination-User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get users
      tags:
      - user
    post:
      consumes:
      - application/json
      operationId: create-user
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: create user
        in: body
        name: createUser
        required: true
        schema:
          $ref: '#/definitions/CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Create user
      tags:
      - user
  /applications/{applicationId}/users/{id}:
    delete:
      consumes:
      - application/json
      operationId: delete-user
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Delets a user by id
      tags:
      - user
    get:
      consumes:
      - application/json
      operationId: user
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get user by id
      tags:
      - user
    patch:
      consumes:
      - application/json
      operationId: update-user
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: update user
        in: body
        name: updateUser
        required: true
        schema:
          $ref: '#/definitions/UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Updates a user's username
      tags:
      - user
  /applications/{applicationId}/users/{id}/info:
    get:
      consumes:
      - application/json
      operationId: user-info
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get user info
      tags:
      - user
    patch:
      consumes:
      - application/json
      operationId: update-user-info
      parameters:
      - description: application id
        in: path
        name: applicationId
        required: true
        type: integer
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: User info updates
        in: body
        name: userinfoUpdates
        required: true
        schema:
          $ref: '#/definitions/UpdateUserInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Updates the user's info
      tags:
      - user
  /applications/{id}:
    delete:
      consumes:
      - application/json
      operationId: delete-application
      parameters:
      - description: application id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Delete application
      tags:
      - application
    get:
      consumes:
      - application/json
      operationId: application
      parameters:
      - description: application id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Application'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get application by id
      tags:
      - application
    patch:
      consumes:
      - application/json
      operationId: update-application
      parameters:
      - description: application id
        in: path
        name: id
        required: true
        type: integer
      - description: update application
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/UpdateApplication'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Application'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Update application
      tags:
      - application
  /health:
    get:
      consumes:
      - application/json
      operationId: healthCheck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Health'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Health'
      summary: Get Health Check
      tags:
      - app
  /mfa:
    post:
      consumes:
      - application/json
      description: Multi-factor authentication
      operationId: validate-mfa
      parameters:
      - description: mfa validation
        in: body
        name: mfa
        required: true
        schema:
          $ref: '#/definitions/model.ValidateMFAST'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Multi-factor authentication
      tags:
      - token
  /password-reset:
    post:
      consumes:
      - application/json
      operationId: password-reset
      parameters:
      - description: request password reset body
        in: body
        name: passwordReset
        required: true
        schema:
          $ref: '#/definitions/model.PasswordResetST'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      summary: Request Password Reset
      tags:
      - password-reset
  /password-reset/request:
    post:
      consumes:
      - application/json
      operationId: request-password-reset
      parameters:
      - description: request password reset body
        in: body
        name: requestPasswordReset
        required: true
        schema:
          $ref: '#/definitions/model.RequestPasswordResetST'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      summary: Request Password Reset
      tags:
      - password-reset
  /register:
    post:
      consumes:
      - application/json
      operationId: register-user
      parameters:
      - description: token request body
        in: body
        name: registrationRequest
        required: true
        schema:
          $ref: '#/definitions/RegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - TenentId: []
      summary: Registration as a new user
      tags:
      - registration
  /token:
    post:
      consumes:
      - application/json
      operationId: create-token
      parameters:
      - description: token request body
        in: body
        name: tokenRequest
        required: true
        schema:
          $ref: '#/definitions/TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - TenentId: []
      summary: Create JWT Token
      tags:
      - token
  /user:
    get:
      consumes:
      - application/json
      operationId: current-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserWithPermissions'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get current user
      tags:
      - current-user
    patch:
      consumes:
      - application/json
      operationId: update-username
      parameters:
      - description: update user
        in: body
        name: updateUser
        required: true
        schema:
          $ref: '#/definitions/UpdateUser'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Updates current user's username
      tags:
      - current-user
  /user/emails:
    post:
      consumes:
      - application/json
      operationId: create-email
      parameters:
      - description: update email
        in: body
        name: createEmail
        required: true
        schema:
          $ref: '#/definitions/CreateEmail'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Email'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Create user email
      tags:
      - current-user
  /user/emails/{id}:
    delete:
      consumes:
      - application/json
      operationId: delete-email
      parameters:
      - description: email id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Delete user email
      tags:
      - current-user
  /user/emails/{id}/confirm:
    patch:
      consumes:
      - application/json
      operationId: confirm-email
      parameters:
      - description: email id
        in: path
        name: id
        required: true
        type: integer
      - description: email confirmation
        in: body
        name: confirmEmail
        required: true
        schema:
          $ref: '#/definitions/ConfirmEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Email'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Confirm email with token
      tags:
      - current-user
  /user/emails/{id}/send-confirmation:
    patch:
      consumes:
      - application/json
      operationId: send-confirmation-to-email
      parameters:
      - description: email id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Send confirmation token to user email
      tags:
      - current-user
  /user/emails/{id}/set-primary:
    patch:
      consumes:
      - application/json
      operationId: set-primary-email
      parameters:
      - description: email id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Set a confirmed email to primary
      tags:
      - current-user
  /user/info:
    get:
      consumes:
      - application/json
      operationId: current-user-info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get user info
      tags:
      - current-user
    patch:
      consumes:
      - application/json
      operationId: update-current-user-info
      parameters:
      - description: User info updates
        in: body
        name: userinfoUpdates
        required: true
        schema:
          $ref: '#/definitions/UpdateUserInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Updates the user's info
      tags:
      - current-user
  /user/passkeys/begin-login:
    post:
      consumes:
      - application/json
      operationId: passkey-begin-login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.PublicKeyCredentialRequestOptions'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Begin logining with a passkey
      tags:
      - passkey
  /user/passkeys/begin-registration:
    post:
      consumes:
      - application/json
      operationId: passkey-begin-registration
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/protocol.PublicKeyCredentialCreationOptions'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Begin registering a new passkey
      tags:
      - passkey
  /user/passkeys/finish-login:
    post:
      consumes:
      - application/json
      operationId: passkey-finish-login
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Finish logining with a passkey
      tags:
      - passkey
  /user/passkeys/finish-registration:
    post:
      consumes:
      - application/json
      operationId: passkey-finish-registration
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Finish registering a new passkey
      tags:
      - passkey
  /user/phone-numbers:
    post:
      consumes:
      - application/json
      operationId: create-phone-number
      parameters:
      - description: update phone_number
        in: body
        name: createPhoneNumber
        required: true
        schema:
          $ref: '#/definitions/CreatePhoneNumber'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/PhoneNumber'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Create user phone number
      tags:
      - current-user
  /user/phone-numbers/{id}:
    delete:
      consumes:
      - application/json
      operationId: delete-phone-number
      parameters:
      - description: phone_number id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Delete user phone number
      tags:
      - current-user
  /user/phone-numbers/{id}/confirm:
    patch:
      consumes:
      - application/json
      operationId: confirm-phone-number
      parameters:
      - description: phone_number id
        in: path
        name: id
        required: true
        type: integer
      - description: phone_number confirmation
        in: body
        name: confirmPhoneNumber
        required: true
        schema:
          $ref: '#/definitions/ConfirmPhoneNumber'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PhoneNumber'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Confirm phone_number with token
      tags:
      - current-user
  /user/phone-numbers/{id}/send-confirmation:
    patch:
      consumes:
      - application/json
      operationId: send-confirmation-to-phone-number
      parameters:
      - description: phone_number id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Send confirmation token to user phone_number
      tags:
      - current-user
  /user/phone-numbers/{id}/set-primary:
    patch:
      consumes:
      - application/json
      operationId: set-primary-phone-number
      parameters:
      - description: email id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Set a confirmed phone to primary
      tags:
      - current-user
  /user/reset-password:
    patch:
      consumes:
      - application/json
      operationId: reset-password
      parameters:
      - description: reset user's password
        in: body
        name: resetPassword
        required: true
        schema:
          $ref: '#/definitions/ResetPassword'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Resets a user's password
      tags:
      - current-user
  /user/totp:
    get:
      consumes:
      - application/json
      operationId: totps
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/TOTP'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get user TOTPs
      tags:
      - current-user
  /user/totp/{tenentId}:
    delete:
      consumes:
      - application/json
      operationId: delete-totp
      parameters:
      - description: tenent id
        in: path
        name: tenentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Delete user TOTP
      tags:
      - current-user
    post:
      consumes:
      - application/json
      operationId: create-totp
      parameters:
      - description: tenent id
        in: path
        name: tenentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/TOTPWithSecret'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Create user TOTP
      tags:
      - current-user
  /user/totp/{tenentId}/enable:
    delete:
      consumes:
      - application/json
      operationId: disalbe-totp
      parameters:
      - description: tenent id
        in: path
        name: tenentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TOTPWithSecret'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Disables user TOTP
      tags:
      - current-user
    patch:
      consumes:
      - application/json
      operationId: enable-totp
      parameters:
      - description: tenent id
        in: path
        name: tenentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TOTPWithSecret'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Enables user TOTP
      tags:
      - current-user
  /version:
    get:
      consumes:
      - application/json
      operationId: version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Version'
      summary: Get Version
      tags:
      - app
securityDefinitions:
  Authorization:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
  Locale:
    in: header
    name: X-Locale
    type: apiKey
  TenentId:
    in: header
    name: Tenent-Id
    type: apiKey
  Timezone:
    in: header
    name: X-Timezone
    type: apiKey
swagger: "2.0"
