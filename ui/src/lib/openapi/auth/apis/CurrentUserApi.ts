/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfirmEmail,
  ConfirmPhoneNumber,
  CreateEmail,
  CreatePhoneNumber,
  Email,
  Errors,
  PhoneNumber,
  ResetPassword,
  TOTP,
  UpdateUser,
  UpdateUserInfoRequest,
  UserInfo,
  UserWithPermissions,
} from '../models/index';
import {
    ConfirmEmailFromJSON,
    ConfirmEmailToJSON,
    ConfirmPhoneNumberFromJSON,
    ConfirmPhoneNumberToJSON,
    CreateEmailFromJSON,
    CreateEmailToJSON,
    CreatePhoneNumberFromJSON,
    CreatePhoneNumberToJSON,
    EmailFromJSON,
    EmailToJSON,
    ErrorsFromJSON,
    ErrorsToJSON,
    PhoneNumberFromJSON,
    PhoneNumberToJSON,
    ResetPasswordFromJSON,
    ResetPasswordToJSON,
    TOTPFromJSON,
    TOTPToJSON,
    UpdateUserFromJSON,
    UpdateUserToJSON,
    UpdateUserInfoRequestFromJSON,
    UpdateUserInfoRequestToJSON,
    UserInfoFromJSON,
    UserInfoToJSON,
    UserWithPermissionsFromJSON,
    UserWithPermissionsToJSON,
} from '../models/index';

export interface ConfirmEmailRequest {
    id: number;
    confirmEmail: ConfirmEmail;
}

export interface ConfirmPhoneNumberRequest {
    id: number;
    confirmPhoneNumber: ConfirmPhoneNumber;
}

export interface CreateEmailRequest {
    createEmail: CreateEmail;
}

export interface CreatePhoneNumberRequest {
    createPhoneNumber: CreatePhoneNumber;
}

export interface DeleteEmailRequest {
    id: number;
}

export interface DeletePhoneNumberRequest {
    id: number;
}

export interface ResetPasswordRequest {
    resetPassword: ResetPassword;
}

export interface SendConfirmationToEmailRequest {
    id: number;
}

export interface SendConfirmationToPhoneNumberRequest {
    id: number;
}

export interface SetPrimaryEmailRequest {
    id: number;
}

export interface SetPrimaryPhoneNumberRequest {
    id: number;
}

export interface UpdateCurrentUserInfoRequest {
    userinfoUpdates: UpdateUserInfoRequest;
}

export interface UpdateUsernameRequest {
    updateUser: UpdateUser;
}

/**
 * CurrentUserApi - interface
 * 
 * @export
 * @interface CurrentUserApiInterface
 */
export interface CurrentUserApiInterface {
    /**
     * 
     * @summary Confirm email with token
     * @param {number} id email id
     * @param {ConfirmEmail} confirmEmail email confirmation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    confirmEmailRaw(requestParameters: ConfirmEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>>;

    /**
     * Confirm email with token
     */
    confirmEmail(id: number, confirmEmail: ConfirmEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email>;

    /**
     * 
     * @summary Confirm phone_number with token
     * @param {number} id phone_number id
     * @param {ConfirmPhoneNumber} confirmPhoneNumber phone_number confirmation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    confirmPhoneNumberRaw(requestParameters: ConfirmPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>>;

    /**
     * Confirm phone_number with token
     */
    confirmPhoneNumber(id: number, confirmPhoneNumber: ConfirmPhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber>;

    /**
     * 
     * @summary Create user email
     * @param {CreateEmail} createEmail update email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    createEmailRaw(requestParameters: CreateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>>;

    /**
     * Create user email
     */
    createEmail(createEmail: CreateEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email>;

    /**
     * 
     * @summary Create user phone number
     * @param {CreatePhoneNumber} createPhoneNumber update phone_number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    createPhoneNumberRaw(requestParameters: CreatePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>>;

    /**
     * Create user phone number
     */
    createPhoneNumber(createPhoneNumber: CreatePhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber>;

    /**
     * 
     * @summary Create user TOTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    createTotpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TOTP>>;

    /**
     * Create user TOTP
     */
    createTotp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TOTP>;

    /**
     * 
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    currentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithPermissions>>;

    /**
     * Get current user
     */
    currentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithPermissions>;

    /**
     * 
     * @summary Get user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    currentUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>>;

    /**
     * Get user info
     */
    currentUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo>;

    /**
     * 
     * @summary Delete user email
     * @param {number} id email id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    deleteEmailRaw(requestParameters: DeleteEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete user email
     */
    deleteEmail(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete user phone number
     * @param {number} id phone_number id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    deletePhoneNumberRaw(requestParameters: DeletePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete user phone number
     */
    deletePhoneNumber(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create user TOTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    deleteTotpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create user TOTP
     */
    deleteTotp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Resets a user\'s password
     * @param {ResetPassword} resetPassword reset user\&#39;s password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Resets a user\'s password
     */
    resetPassword(resetPassword: ResetPassword, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Send confirmation token to user email
     * @param {number} id email id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    sendConfirmationToEmailRaw(requestParameters: SendConfirmationToEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send confirmation token to user email
     */
    sendConfirmationToEmail(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Send confirmation token to user phone_number
     * @param {number} id phone_number id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    sendConfirmationToPhoneNumberRaw(requestParameters: SendConfirmationToPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send confirmation token to user phone_number
     */
    sendConfirmationToPhoneNumber(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Set a confirmed email to primary
     * @param {number} id email id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    setPrimaryEmailRaw(requestParameters: SetPrimaryEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Set a confirmed email to primary
     */
    setPrimaryEmail(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Set a confirmed phone to primary
     * @param {number} id email id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    setPrimaryPhoneNumberRaw(requestParameters: SetPrimaryPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Set a confirmed phone to primary
     */
    setPrimaryPhoneNumber(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Updates the user\'s info
     * @param {UpdateUserInfoRequest} userinfoUpdates User info updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    updateCurrentUserInfoRaw(requestParameters: UpdateCurrentUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>>;

    /**
     * Updates the user\'s info
     */
    updateCurrentUserInfo(userinfoUpdates: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo>;

    /**
     * 
     * @summary Updates current user\'s username
     * @param {UpdateUser} updateUser update user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    updateUsernameRaw(requestParameters: UpdateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates current user\'s username
     */
    updateUsername(updateUser: UpdateUser, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CurrentUserApi extends runtime.BaseAPI implements CurrentUserApiInterface {

    /**
     * Confirm email with token
     */
    async confirmEmailRaw(requestParameters: ConfirmEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling confirmEmail().'
            );
        }

        if (requestParameters['confirmEmail'] == null) {
            throw new runtime.RequiredError(
                'confirmEmail',
                'Required parameter "confirmEmail" was null or undefined when calling confirmEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/emails/{id}/confirm`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmEmailToJSON(requestParameters['confirmEmail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     * Confirm email with token
     */
    async confirmEmail(id: number, confirmEmail: ConfirmEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email> {
        const response = await this.confirmEmailRaw({ id: id, confirmEmail: confirmEmail }, initOverrides);
        return await response.value();
    }

    /**
     * Confirm phone_number with token
     */
    async confirmPhoneNumberRaw(requestParameters: ConfirmPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling confirmPhoneNumber().'
            );
        }

        if (requestParameters['confirmPhoneNumber'] == null) {
            throw new runtime.RequiredError(
                'confirmPhoneNumber',
                'Required parameter "confirmPhoneNumber" was null or undefined when calling confirmPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/phone-numbers/{id}/confirm`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmPhoneNumberToJSON(requestParameters['confirmPhoneNumber']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhoneNumberFromJSON(jsonValue));
    }

    /**
     * Confirm phone_number with token
     */
    async confirmPhoneNumber(id: number, confirmPhoneNumber: ConfirmPhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber> {
        const response = await this.confirmPhoneNumberRaw({ id: id, confirmPhoneNumber: confirmPhoneNumber }, initOverrides);
        return await response.value();
    }

    /**
     * Create user email
     */
    async createEmailRaw(requestParameters: CreateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>> {
        if (requestParameters['createEmail'] == null) {
            throw new runtime.RequiredError(
                'createEmail',
                'Required parameter "createEmail" was null or undefined when calling createEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/emails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmailToJSON(requestParameters['createEmail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     * Create user email
     */
    async createEmail(createEmail: CreateEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email> {
        const response = await this.createEmailRaw({ createEmail: createEmail }, initOverrides);
        return await response.value();
    }

    /**
     * Create user phone number
     */
    async createPhoneNumberRaw(requestParameters: CreatePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>> {
        if (requestParameters['createPhoneNumber'] == null) {
            throw new runtime.RequiredError(
                'createPhoneNumber',
                'Required parameter "createPhoneNumber" was null or undefined when calling createPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/phone-numbers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePhoneNumberToJSON(requestParameters['createPhoneNumber']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhoneNumberFromJSON(jsonValue));
    }

    /**
     * Create user phone number
     */
    async createPhoneNumber(createPhoneNumber: CreatePhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber> {
        const response = await this.createPhoneNumberRaw({ createPhoneNumber: createPhoneNumber }, initOverrides);
        return await response.value();
    }

    /**
     * Create user TOTP
     */
    async createTotpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TOTP>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/totp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TOTPFromJSON(jsonValue));
    }

    /**
     * Create user TOTP
     */
    async createTotp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TOTP> {
        const response = await this.createTotpRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current user
     */
    async currentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithPermissions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithPermissionsFromJSON(jsonValue));
    }

    /**
     * Get current user
     */
    async currentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithPermissions> {
        const response = await this.currentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user info
     */
    async currentUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Get user info
     */
    async currentUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.currentUserInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete user email
     */
    async deleteEmailRaw(requestParameters: DeleteEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete user email
     */
    async deleteEmail(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmailRaw({ id: id }, initOverrides);
    }

    /**
     * Delete user phone number
     */
    async deletePhoneNumberRaw(requestParameters: DeletePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/phone-numbers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete user phone number
     */
    async deletePhoneNumber(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePhoneNumberRaw({ id: id }, initOverrides);
    }

    /**
     * Create user TOTP
     */
    async deleteTotpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/totp`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create user TOTP
     */
    async deleteTotp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTotpRaw(initOverrides);
    }

    /**
     * Resets a user\'s password
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetPassword'] == null) {
            throw new runtime.RequiredError(
                'resetPassword',
                'Required parameter "resetPassword" was null or undefined when calling resetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/reset-password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordToJSON(requestParameters['resetPassword']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets a user\'s password
     */
    async resetPassword(resetPassword: ResetPassword, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw({ resetPassword: resetPassword }, initOverrides);
    }

    /**
     * Send confirmation token to user email
     */
    async sendConfirmationToEmailRaw(requestParameters: SendConfirmationToEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sendConfirmationToEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/emails/{id}/send-confirmation`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send confirmation token to user email
     */
    async sendConfirmationToEmail(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendConfirmationToEmailRaw({ id: id }, initOverrides);
    }

    /**
     * Send confirmation token to user phone_number
     */
    async sendConfirmationToPhoneNumberRaw(requestParameters: SendConfirmationToPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sendConfirmationToPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/phone-numbers/{id}/send-confirmation`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send confirmation token to user phone_number
     */
    async sendConfirmationToPhoneNumber(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendConfirmationToPhoneNumberRaw({ id: id }, initOverrides);
    }

    /**
     * Set a confirmed email to primary
     */
    async setPrimaryEmailRaw(requestParameters: SetPrimaryEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setPrimaryEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/emails/{id}/set-primary`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set a confirmed email to primary
     */
    async setPrimaryEmail(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPrimaryEmailRaw({ id: id }, initOverrides);
    }

    /**
     * Set a confirmed phone to primary
     */
    async setPrimaryPhoneNumberRaw(requestParameters: SetPrimaryPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setPrimaryPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/phone-numbers/{id}/set-primary`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set a confirmed phone to primary
     */
    async setPrimaryPhoneNumber(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPrimaryPhoneNumberRaw({ id: id }, initOverrides);
    }

    /**
     * Updates the user\'s info
     */
    async updateCurrentUserInfoRaw(requestParameters: UpdateCurrentUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters['userinfoUpdates'] == null) {
            throw new runtime.RequiredError(
                'userinfoUpdates',
                'Required parameter "userinfoUpdates" was null or undefined when calling updateCurrentUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/info`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInfoRequestToJSON(requestParameters['userinfoUpdates']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Updates the user\'s info
     */
    async updateCurrentUserInfo(userinfoUpdates: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.updateCurrentUserInfoRaw({ userinfoUpdates: userinfoUpdates }, initOverrides);
        return await response.value();
    }

    /**
     * Updates current user\'s username
     */
    async updateUsernameRaw(requestParameters: UpdateUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateUser'] == null) {
            throw new runtime.RequiredError(
                'updateUser',
                'Required parameter "updateUser" was null or undefined when calling updateUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserToJSON(requestParameters['updateUser']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates current user\'s username
     */
    async updateUsername(updateUser: UpdateUser, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUsernameRaw({ updateUser: updateUser }, initOverrides);
    }

}
