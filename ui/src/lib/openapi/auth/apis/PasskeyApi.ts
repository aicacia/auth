/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Errors,
  ProtocolPublicKeyCredentialCreationOptions,
  ProtocolPublicKeyCredentialRequestOptions,
} from '../models/index';
import {
    ErrorsFromJSON,
    ErrorsToJSON,
    ProtocolPublicKeyCredentialCreationOptionsFromJSON,
    ProtocolPublicKeyCredentialCreationOptionsToJSON,
    ProtocolPublicKeyCredentialRequestOptionsFromJSON,
    ProtocolPublicKeyCredentialRequestOptionsToJSON,
} from '../models/index';

/**
 * PasskeyApi - interface
 * 
 * @export
 * @interface PasskeyApiInterface
 */
export interface PasskeyApiInterface {
    /**
     * 
     * @summary Begin logining with a passkey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeyApiInterface
     */
    passkeyBeginLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProtocolPublicKeyCredentialRequestOptions>>;

    /**
     * Begin logining with a passkey
     */
    passkeyBeginLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProtocolPublicKeyCredentialRequestOptions>;

    /**
     * 
     * @summary Begin registering a new passkey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeyApiInterface
     */
    passkeyBeginRegistrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProtocolPublicKeyCredentialCreationOptions>>;

    /**
     * Begin registering a new passkey
     */
    passkeyBeginRegistration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProtocolPublicKeyCredentialCreationOptions>;

    /**
     * 
     * @summary Finish logining with a passkey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeyApiInterface
     */
    passkeyFinishLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Finish logining with a passkey
     */
    passkeyFinishLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Finish registering a new passkey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeyApiInterface
     */
    passkeyFinishRegistrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Finish registering a new passkey
     */
    passkeyFinishRegistration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class PasskeyApi extends runtime.BaseAPI implements PasskeyApiInterface {

    /**
     * Begin logining with a passkey
     */
    async passkeyBeginLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProtocolPublicKeyCredentialRequestOptions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/passkeys/begin-login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtocolPublicKeyCredentialRequestOptionsFromJSON(jsonValue));
    }

    /**
     * Begin logining with a passkey
     */
    async passkeyBeginLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProtocolPublicKeyCredentialRequestOptions> {
        const response = await this.passkeyBeginLoginRaw(initOverrides);
        return await response.value();
    }

    /**
     * Begin registering a new passkey
     */
    async passkeyBeginRegistrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProtocolPublicKeyCredentialCreationOptions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/passkeys/begin-registration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtocolPublicKeyCredentialCreationOptionsFromJSON(jsonValue));
    }

    /**
     * Begin registering a new passkey
     */
    async passkeyBeginRegistration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProtocolPublicKeyCredentialCreationOptions> {
        const response = await this.passkeyBeginRegistrationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Finish logining with a passkey
     */
    async passkeyFinishLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/passkeys/finish-login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Finish logining with a passkey
     */
    async passkeyFinishLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.passkeyFinishLoginRaw(initOverrides);
    }

    /**
     * Finish registering a new passkey
     */
    async passkeyFinishRegistrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/user/passkeys/finish-registration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Finish registering a new passkey
     */
    async passkeyFinishRegistration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.passkeyFinishRegistrationRaw(initOverrides);
    }

}
