/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Errors,
  RegistrationRequest,
  Token,
} from '../models/index';
import {
    ErrorsFromJSON,
    ErrorsToJSON,
    RegistrationRequestFromJSON,
    RegistrationRequestToJSON,
    TokenFromJSON,
    TokenToJSON,
} from '../models/index';

export interface RegisterUserRequest {
    registrationRequest: RegistrationRequest;
}

/**
 * RegistrationApi - interface
 * 
 * @export
 * @interface RegistrationApiInterface
 */
export interface RegistrationApiInterface {
    /**
     * 
     * @summary Registration as a new user
     * @param {RegistrationRequest} registrationRequest token request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApiInterface
     */
    registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     * Registration as a new user
     */
    registerUser(registrationRequest: RegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

}

/**
 * 
 */
export class RegistrationApi extends runtime.BaseAPI implements RegistrationApiInterface {

    /**
     * Registration as a new user
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['registrationRequest'] == null) {
            throw new runtime.RequiredError(
                'registrationRequest',
                'Required parameter "registrationRequest" was null or undefined when calling registerUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Tenent-Id"] = await this.configuration.apiKey("Tenent-Id"); // TenentId authentication
        }

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationRequestToJSON(requestParameters['registrationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Registration as a new user
     */
    async registerUser(registrationRequest: RegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.registerUserRaw({ registrationRequest: registrationRequest }, initOverrides);
        return await response.value();
    }

}
