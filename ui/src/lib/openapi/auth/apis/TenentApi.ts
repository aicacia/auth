/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTenent,
  Errors,
  PaginationTenent,
  Tenent,
  UpdateTenent,
} from '../models/index';
import {
    CreateTenentFromJSON,
    CreateTenentToJSON,
    ErrorsFromJSON,
    ErrorsToJSON,
    PaginationTenentFromJSON,
    PaginationTenentToJSON,
    TenentFromJSON,
    TenentToJSON,
    UpdateTenentFromJSON,
    UpdateTenentToJSON,
} from '../models/index';

export interface CreateTenentRequest {
    applicationId: number;
    tenent: CreateTenent;
}

export interface DeleteTenentRequest {
    applicationId: number;
    id: number;
}

export interface TenentRequest {
    applicationId: number;
    id: number;
}

export interface TenentPrivateKeyRequest {
    applicationId: number;
    id: number;
}

export interface TenentsRequest {
    applicationId: number;
    limit?: number;
    offset?: number;
}

export interface UpdateTenentRequest {
    applicationId: number;
    id: number;
    tenent: UpdateTenent;
}

/**
 * TenentApi - interface
 * 
 * @export
 * @interface TenentApiInterface
 */
export interface TenentApiInterface {
    /**
     * 
     * @summary Create application tenent
     * @param {number} applicationId application id
     * @param {CreateTenent} tenent create application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    createTenentRaw(requestParameters: CreateTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>>;

    /**
     * Create application tenent
     */
    createTenent(applicationId: number, tenent: CreateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent>;

    /**
     * 
     * @summary Delete application tenent
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    deleteTenentRaw(requestParameters: DeleteTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete application tenent
     */
    deleteTenent(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get application tenent by id
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    tenentRaw(requestParameters: TenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>>;

    /**
     * Get application tenent by id
     */
    tenent(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent>;

    /**
     * 
     * @summary Get application tenent by id
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    tenentPrivateKeyRaw(requestParameters: TenentPrivateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Get application tenent by id
     */
    tenentPrivateKey(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Get application tenents
     * @param {number} applicationId application id
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    tenentsRaw(requestParameters: TenentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationTenent>>;

    /**
     * Get application tenents
     */
    tenents(applicationId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationTenent>;

    /**
     * 
     * @summary Update application tenent
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {UpdateTenent} tenent update application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    updateTenentRaw(requestParameters: UpdateTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>>;

    /**
     * Update application tenent
     */
    updateTenent(applicationId: number, id: number, tenent: UpdateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent>;

}

/**
 * 
 */
export class TenentApi extends runtime.BaseAPI implements TenentApiInterface {

    /**
     * Create application tenent
     */
    async createTenentRaw(requestParameters: CreateTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling createTenent().'
            );
        }

        if (requestParameters['tenent'] == null) {
            throw new runtime.RequiredError(
                'tenent',
                'Required parameter "tenent" was null or undefined when calling createTenent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTenentToJSON(requestParameters['tenent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenentFromJSON(jsonValue));
    }

    /**
     * Create application tenent
     */
    async createTenent(applicationId: number, tenent: CreateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent> {
        const response = await this.createTenentRaw({ applicationId: applicationId, tenent: tenent }, initOverrides);
        return await response.value();
    }

    /**
     * Delete application tenent
     */
    async deleteTenentRaw(requestParameters: DeleteTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling deleteTenent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTenent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete application tenent
     */
    async deleteTenent(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTenentRaw({ applicationId: applicationId, id: id }, initOverrides);
    }

    /**
     * Get application tenent by id
     */
    async tenentRaw(requestParameters: TenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling tenent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tenent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenentFromJSON(jsonValue));
    }

    /**
     * Get application tenent by id
     */
    async tenent(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent> {
        const response = await this.tenentRaw({ applicationId: applicationId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get application tenent by id
     */
    async tenentPrivateKeyRaw(requestParameters: TenentPrivateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling tenentPrivateKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tenentPrivateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}/private-key`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get application tenent by id
     */
    async tenentPrivateKey(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.tenentPrivateKeyRaw({ applicationId: applicationId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get application tenents
     */
    async tenentsRaw(requestParameters: TenentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationTenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling tenents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationTenentFromJSON(jsonValue));
    }

    /**
     * Get application tenents
     */
    async tenents(applicationId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationTenent> {
        const response = await this.tenentsRaw({ applicationId: applicationId, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Update application tenent
     */
    async updateTenentRaw(requestParameters: UpdateTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling updateTenent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTenent().'
            );
        }

        if (requestParameters['tenent'] == null) {
            throw new runtime.RequiredError(
                'tenent',
                'Required parameter "tenent" was null or undefined when calling updateTenent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenentToJSON(requestParameters['tenent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenentFromJSON(jsonValue));
    }

    /**
     * Update application tenent
     */
    async updateTenent(applicationId: number, id: number, tenent: UpdateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent> {
        const response = await this.updateTenentRaw({ applicationId: applicationId, id: id, tenent: tenent }, initOverrides);
        return await response.value();
    }

}
