/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProtocolAuthenticatorAttachment } from './ProtocolAuthenticatorAttachment';
import {
    ProtocolAuthenticatorAttachmentFromJSON,
    ProtocolAuthenticatorAttachmentFromJSONTyped,
    ProtocolAuthenticatorAttachmentToJSON,
} from './ProtocolAuthenticatorAttachment';
import type { ProtocolResidentKeyRequirement } from './ProtocolResidentKeyRequirement';
import {
    ProtocolResidentKeyRequirementFromJSON,
    ProtocolResidentKeyRequirementFromJSONTyped,
    ProtocolResidentKeyRequirementToJSON,
} from './ProtocolResidentKeyRequirement';
import type { ProtocolUserVerificationRequirement } from './ProtocolUserVerificationRequirement';
import {
    ProtocolUserVerificationRequirementFromJSON,
    ProtocolUserVerificationRequirementFromJSONTyped,
    ProtocolUserVerificationRequirementToJSON,
} from './ProtocolUserVerificationRequirement';

/**
 * 
 * @export
 * @interface ProtocolAuthenticatorSelection
 */
export interface ProtocolAuthenticatorSelection {
    /**
     * AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only
     * authenticators attached with the specified AuthenticatorAttachment enum.
     * @type {ProtocolAuthenticatorAttachment}
     * @memberof ProtocolAuthenticatorSelection
     */
    authenticatorAttachment?: ProtocolAuthenticatorAttachment;
    /**
     * RequireResidentKey this member describes the Relying Party's requirements regarding resident
     * credentials. If the parameter is set to true, the authenticator MUST create a client-side-resident
     * public key credential source when creating a public key credential.
     * @type {boolean}
     * @memberof ProtocolAuthenticatorSelection
     */
    requireResidentKey?: boolean;
    /**
     * ResidentKey this member describes the Relying Party's requirements regarding resident
     * credentials per Webauthn Level 2.
     * @type {ProtocolResidentKeyRequirement}
     * @memberof ProtocolAuthenticatorSelection
     */
    residentKey?: ProtocolResidentKeyRequirement;
    /**
     * UserVerification This member describes the Relying Party's requirements regarding user verification for
     * the create() operation. Eligible authenticators are filtered to only those capable of satisfying this
     * requirement.
     * @type {ProtocolUserVerificationRequirement}
     * @memberof ProtocolAuthenticatorSelection
     */
    userVerification?: ProtocolUserVerificationRequirement;
}

/**
 * Check if a given object implements the ProtocolAuthenticatorSelection interface.
 */
export function instanceOfProtocolAuthenticatorSelection(value: object): boolean {
    return true;
}

export function ProtocolAuthenticatorSelectionFromJSON(json: any): ProtocolAuthenticatorSelection {
    return ProtocolAuthenticatorSelectionFromJSONTyped(json, false);
}

export function ProtocolAuthenticatorSelectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProtocolAuthenticatorSelection {
    if (json == null) {
        return json;
    }
    return {
        
        'authenticatorAttachment': json['authenticatorAttachment'] == null ? undefined : ProtocolAuthenticatorAttachmentFromJSON(json['authenticatorAttachment']),
        'requireResidentKey': json['requireResidentKey'] == null ? undefined : json['requireResidentKey'],
        'residentKey': json['residentKey'] == null ? undefined : ProtocolResidentKeyRequirementFromJSON(json['residentKey']),
        'userVerification': json['userVerification'] == null ? undefined : ProtocolUserVerificationRequirementFromJSON(json['userVerification']),
    };
}

export function ProtocolAuthenticatorSelectionToJSON(value?: ProtocolAuthenticatorSelection | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'authenticatorAttachment': ProtocolAuthenticatorAttachmentToJSON(value['authenticatorAttachment']),
        'requireResidentKey': value['requireResidentKey'],
        'residentKey': ProtocolResidentKeyRequirementToJSON(value['residentKey']),
        'userVerification': ProtocolUserVerificationRequirementToJSON(value['userVerification']),
    };
}

